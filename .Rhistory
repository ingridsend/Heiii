library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ slice.size,3 , raw=TRUE, data=train.data)
model_2 = lm(intensity ~ slice.size,4 , raw=TRUE, data=train.data)
model_3 = lm(intensity ~ slice.size,5 , raw=TRUE, data=train.data)
model_4 = lm(intensity ~ slice.size,6 , raw=TRUE, data=train.data)
model_5 = lm(intensity ~ slice.size,7 , raw=TRUE, data=train.data)
print(anova(model_1,model_2,model_3,model_4,model_5))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ slice.size,3 , data=train.data)
model_2 = lm(intensity ~ slice.size,4 , data=train.data)
model_3 = lm(intensity ~ slice.size,5 , data=train.data)
model_4 = lm(intensity ~ slice.size,6 , data=train.data)
model_5 = lm(intensity ~ slice.size,7 , data=train.data)
print(anova(model_1,model_2,model_3,model_4,model_5))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ poly(slice.size,3) , data=train.data)
model_2 = lm(intensity ~ poly(slice.size,4) , data=train.data)
model_3 = lm(intensity ~ poly(slice.size,5) , data=train.data)
model_4 = lm(intensity ~ poly(slice.size,6) , data=train.data)
model_5 = lm(intensity ~ poly(slice.size,7) , data=train.data)
print(anova(model_1,model_2,model_3,model_4,model_5))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ poly(slice.size,3) , data=train.data)
model_2 = lm(intensity ~ poly(slice.size,4) , data=train.data)
model_3 = lm(intensity ~ poly(slice.size,5) , data=train.data)
model_4 = lm(intensity ~ poly(slice.size,6) , data=train.data)
model_5 = lm(intensity ~ poly(slice.size,7) , data=train.data)
model_6 = lm(intensity ~ poly(slice.size,8) , data=train.data)
model_7 = lm(intensity ~ poly(slice.size,9) , data=train.data)
print(anova(model_1,model_2,model_3,model_4,model_5))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ poly(slice.size,3) , data=train.data)
model_2 = lm(intensity ~ poly(slice.size,4) , data=train.data)
model_3 = lm(intensity ~ poly(slice.size,5) , data=train.data)
model_4 = lm(intensity ~ poly(slice.size,6) , data=train.data)
model_5 = lm(intensity ~ poly(slice.size,7) , data=train.data)
model_6 = lm(intensity ~ poly(slice.size,8) , data=train.data)
model_7 = lm(intensity ~ poly(slice.size,9) , data=train.data)
print(anova(model_1,model_2,model_3,model_4,model_5,model_6,model_7))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ poly(slice.size,3) , data=train.data)
model_2 = lm(intensity ~ poly(slice.size,4) , data=train.data)
model_3 = lm(intensity ~ poly(slice.size,5) , data=train.data)
model_4 = lm(intensity ~ poly(slice.size,6) , data=train.data)
model_5 = lm(intensity ~ poly(slice.size,7) , data=train.data)
model_6 = lm(intensity ~ poly(slice.size,8) , data=train.data)
model_7 = lm(intensity ~ poly(slice.size,9) , data=train.data)
model_8 = lm(intensity ~ poly(slice.size,10) , data=train.data)
print(anova(model_1,model_2,model_3,model_4,model_5,model_6,model_7,model_8))
# Build the model
model <- lm(intensity ~ poly(slice.size, 9, raw = TRUE), data = train.data)
# Make predictions
predictions <- model %>% predict(test.data)
# Model performance
modelPerfomance = data.frame(
RMSE = RMSE(predictions, test.data$intensity),
R2 = R2(predictions, test.data$intensity)
)
print(modelPerfomance)
ggplot(train.data, aes(slice.size, intensity) ) + geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 9, raw = TRUE))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ poly(slice.size,3) , data=train.data)
model_2 = lm(intensity ~ poly(slice.size,4) , data=train.data)
model_3 = lm(intensity ~ poly(slice.size,5) , data=train.data)
model_4 = lm(intensity ~ poly(slice.size,6) , data=train.data)
model_5 = lm(intensity ~ poly(slice.size,7) , data=train.data)
model_6 = lm(intensity ~ poly(slice.size,8) , data=train.data)
model_7 = lm(intensity ~ poly(slice.size,9) , data=train.data)
model_8 = lm(intensity ~ poly(slice.size,10) , data=train.data)
model_9 = g=glm(intensity~slice.size,family=binomial,dat)
print(anova(model_1,model_2,model_3,model_4,model_5,model_6,model_7,model_8,model_9))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
model_1 = lm(intensity ~ poly(slice.size,3) , data=train.data)
model_2 = lm(intensity ~ poly(slice.size,4) , data=train.data)
model_3 = lm(intensity ~ poly(slice.size,5) , data=train.data)
model_4 = lm(intensity ~ poly(slice.size,6) , data=train.data)
model_5 = lm(intensity ~ poly(slice.size,7) , data=train.data)
model_6 = lm(intensity ~ poly(slice.size,8) , data=train.data)
model_7 = lm(intensity ~ poly(slice.size,9) , data=train.data)
model_8 = lm(intensity ~ poly(slice.size,10) , data=train.data)
model_9 = g=glm(intensity~slice.size,family=binomial,train.data)
print(anova(model_1,model_2,model_3,model_4,model_5,model_6,model_7,model_8,model_9))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
d_scaled <- d[,1]/max(d$intensity)
print(d_scaled)
View(d)
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
d_scaled <- d$intensity/max(d$intensity)
print(d_scaled)
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
d_scaled = d$intensity/max(d$intensity)
print(d_scaled)
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
# Build the model
model <- lm(intensity ~ poly(slice.size, 4, raw = TRUE), data = train.data)
# Make predictions
predictions <- model %>% predict(test.data)
# Model performance
modelPerfomance = data.frame(
RMSE = RMSE(predictions, test.data$intensity),
R2 = R2(predictions, test.data$intensity)
)
print(modelPerfomance)
ggplot(train.data, aes(slice.size, intensity) ) + geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 4, raw = TRUE))
library(tidyverse)
library(caret)
theme_set(theme_classic())
d = read.csv("C:/Users/Bruker/Desktop/FRET/Results.csv", sep=",", dec=".")
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(d) + geom_point(aes(x=slice.size, y=intensity), size=2, colour="#993399") +
xlab("gray scale") + ylab("time (500ms")
print(pl)
training.samples <- d$intensity %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- d[training.samples, ]
test.data <- d[-training.samples, ]
# Build the model
model <- lm(intensity ~ poly(slice.size, 5, raw = TRUE), data = train.data)
# Make predictions
predictions <- model %>% predict(test.data)
# Model performance
modelPerfomance = data.frame(
RMSE = RMSE(predictions, test.data$intensity),
R2 = R2(predictions, test.data$intensity)
)
print(modelPerfomance)
ggplot(train.data, aes(slice.size, intensity) ) + geom_point() +
stat_smooth(method = lm, formula = y ~ poly(x, 5, raw = TRUE))
